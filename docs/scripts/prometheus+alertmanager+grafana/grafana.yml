apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  name: grafana
  namespace: monitor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  name: grafana
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/metrics
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  name: grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: monitor
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    cluster-agent-app/name: grafana-datasources
    cluster-agent-unit/version: v7.5.2
  name: grafana-datasources
  namespace: monitor
data:
  default.yaml: |
    apiVersion: 1
    deleteDatasources:
      - name: Prometheus
        orgId: 1
      - name: Loki
        orgId: 1
      - name: Zipkin
        orgId: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus.monitor:9090
        version: 1
        editable: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  name: grafana
spec:
  selector:
    matchLabels:
      cluster-agent-app/name: grafana
      cluster-agent-unit/version: v7.5.2
  template:
    metadata:
      labels:
        cluster-agent-app/name: grafana
        cluster-agent-unit/version: v7.5.2
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsUser: 0
      volumes:
        - name: datasources-volume
          configMap:
            name: grafana-datasources
      containers:
        - name: grafana
          image: docker.io/grafana/grafana:7.5.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          volumeMounts:
            - name: datasources-volume
              mountPath: /etc/grafana/provisioning/datasources
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: "2000m"
              memory: "4G"
            limits:
              cpu: "2000m"
              memory: "4G"

---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
  clusterIP: None
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: grafana
  namespace: monitor
  labels:
    cluster-agent-app/name: grafana
    cluster-agent-unit/version: v7.5.2
spec:
  rules:
    - host: grafana.ava.com
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: grafana
                port:
                  number: 3000