<?xml version="1.0" encoding="UTF-8"?>

<!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->

<!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->

<!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->

<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--contextName 就是上下文的名字，没什么作用-->
    <contextName>logback</contextName>
    <!-- %date{yyyy-MM-dd HH:mm:ss.SSS}、%d{yyyy-MM-dd HH:mm:ss.SSS} 日期时间输出 -->
    <!--
        [%-5level] 输出日志级别，长度为5，左对齐显示
        %p、%level、%le  输出日志级别。
    -->
    <!-- %r、%relative 输出从程序启动到创建日志记录的时间，单位是毫秒-->
    <!-- %msg、%m、%message 日志内容 -->
    <!-- %M、%method 输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。 -->
    <!-- %n 换行 -->
    <!--
        %c{n}、%logger{n}、%lo{n}
        输出日志的 logger 名，可有一个整形参数 n，功能是缩短 logger 名，设置为 0 表示只输入 logger 最右边符号之后的字符串。

        %C{n}、%class{n}
        输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。

        %F、%file
        输出执行记录请求的 java 源文件名。尽量避免使用，除非执行速度不造成任何问题。

        %caller{depth}
        输出生成日志的调用者的位置信息，整数选项表示输出信息深度。
        例如， %caller{2} 输出为：
        0    [main] DEBUG - logging statement
        Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)
        Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)
    -->
    <!-- %t、%thread 输出线程名 -->
    <!-- %t 输出线程名 -->
    <!--
        %L、%line
        输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。
    -->
    <!--
        %replace(p){r, t}
        p 为日志内容，r 是正则表达式，将 p 中符合 r 的内容替换为 t。
        例如， "%replace(%msg){'\s', ''}"
    -->

    <!--
        格式修饰符，与转换符共同使用：
        可选的格式修饰符位于“%”和转换符之间。
        第一个可选修饰符是左对齐标志，符号是减号“-”；接着是可选的最小宽度修饰符，用十进制数表示。
        如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。
        如果字符大于最小宽度，字符永远不会被截断。
        最大宽度修饰符，符号是点号"."后面加十进制数。
        如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。
        例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间进行左对齐且最小宽度为 4。
    -->

    <!-- property 定义属性，上下文可以进行引用，不用重复写-->
    <property name="PATTERN"
            value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{10}:%msg%n"/>
    <property name="DEV_LOG_LOCATION"
            value="D:/log/app/"/>
    <property name="TEST_LOG_LOCATION"
            value="/opt/gree/log/"/>
    <property name="PROD_LOG_LOCATION"
            value="/opt/gree/log/"/>
    <springProperty scope="context" name="logging.level"
                    source="custom_log.level"/>

        <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
            <!--layout 用于控制台输出的格式-->
            <layout class="ch.qos.logback.classic.PatternLayout">
                <!--指定格式-->
                <pattern>
                    <!-- 引用属性 PATTERN -->
                    ${PATTERN}
                </pattern>
            </layout>
            <!--encoder 用于文件输出的格式-->
            <!--<encoder>-->
            <!--<pattern>${PATTERN}</pattern>-->
            <!--<charset>utf-8</charset>-->
            <!--</encoder>-->
        </appender>


        <appender name="logger" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- rollover daily -->
                <!--按日期进行日志切分，%d 日期-->
                <fileNamePattern>${PROD_LOG_LOCATION}/prod_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <!--each file should be at most 100MB, keep 60 days worth of history, but at most 20GB-->
                <!--每个文件按大小进行切分，如果单日日志文件 info_2018-10-11_0.logger 超过 50m，那么就会生成 info_2018-10-11_1.logger，以此类推-->
                <maxFileSize>50MB</maxFileSize>
                <!--日志文件保留 30 天-->
                <maxHistory>30</maxHistory>
                <!--最多总文件大小 10G-->
                <totalSizeCap>10GB</totalSizeCap>
            </rollingPolicy>

            <!--encoder 用于设置生成的日志文件的日志输出的格式-->
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--控制日志输出级别-->
        <!--info 以上的级别都会输出，有过滤器除外-->
        <root level="info">
            <!--使用如下配置-->
            <appender-ref ref="consoleLog"/>                    
            <appender-ref ref="logger"/>
        </root>
        <logger name="com" level="warn"/>
        <logger name="io" level="warn"/>
        <logger name="springfox" level="warn"/>
        <logger name="graphql" level="warn"/>
        <logger name="notprivacysafe" level="warn"/>
        <logger name="org" level="warn"/>
        <logger name="javax" level="warn"/>
        <logger name="reactor" level="warn"/>
        <logger name="com.gree" level="info"/>

</configuration>